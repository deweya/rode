// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../pkg/occurrence/types.go

// Package mock_occurrence is a generated GoMock package.
package mock_occurrence

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grafeas_go_proto "github.com/grafeas/grafeas/proto/v1beta1/grafeas_go_proto"
	reflect "reflect"
)

// MockLister is a mock of Lister interface
type MockLister struct {
	ctrl     *gomock.Controller
	recorder *MockListerMockRecorder
}

// MockListerMockRecorder is the mock recorder for MockLister
type MockListerMockRecorder struct {
	mock *MockLister
}

// NewMockLister creates a new mock instance
func NewMockLister(ctrl *gomock.Controller) *MockLister {
	mock := &MockLister{ctrl: ctrl}
	mock.recorder = &MockListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLister) EXPECT() *MockListerMockRecorder {
	return m.recorder
}

// ListOccurrences mocks base method
func (m *MockLister) ListOccurrences(ctx context.Context, resourceURI string) ([]*grafeas_go_proto.Occurrence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOccurrences", ctx, resourceURI)
	ret0, _ := ret[0].([]*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOccurrences indicates an expected call of ListOccurrences
func (mr *MockListerMockRecorder) ListOccurrences(ctx, resourceURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOccurrences", reflect.TypeOf((*MockLister)(nil).ListOccurrences), ctx, resourceURI)
}

// ListAttestations mocks base method
func (m *MockLister) ListAttestations(ctx context.Context, resourceURI string) ([]*grafeas_go_proto.Occurrence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttestations", ctx, resourceURI)
	ret0, _ := ret[0].([]*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttestations indicates an expected call of ListAttestations
func (mr *MockListerMockRecorder) ListAttestations(ctx, resourceURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttestations", reflect.TypeOf((*MockLister)(nil).ListAttestations), ctx, resourceURI)
}

// MockCreator is a mock of Creator interface
type MockCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorMockRecorder
}

// MockCreatorMockRecorder is the mock recorder for MockCreator
type MockCreatorMockRecorder struct {
	mock *MockCreator
}

// NewMockCreator creates a new mock instance
func NewMockCreator(ctrl *gomock.Controller) *MockCreator {
	mock := &MockCreator{ctrl: ctrl}
	mock.recorder = &MockCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreator) EXPECT() *MockCreatorMockRecorder {
	return m.recorder
}

// CreateOccurrences mocks base method
func (m *MockCreator) CreateOccurrences(arg0 context.Context, arg1 ...*grafeas_go_proto.Occurrence) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOccurrences", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOccurrences indicates an expected call of CreateOccurrences
func (mr *MockCreatorMockRecorder) CreateOccurrences(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOccurrences", reflect.TypeOf((*MockCreator)(nil).CreateOccurrences), varargs...)
}
