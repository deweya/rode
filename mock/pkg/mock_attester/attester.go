// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/attester/attester.go

// Package mock_attester is a generated GoMock package.
package mock_attester

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	attester "github.com/liatrio/rode/pkg/attester"
	reflect "reflect"
)

// MockAttester is a mock of Attester interface
type MockAttester struct {
	ctrl     *gomock.Controller
	recorder *MockAttesterMockRecorder
}

// MockAttesterMockRecorder is the mock recorder for MockAttester
type MockAttesterMockRecorder struct {
	mock *MockAttester
}

// NewMockAttester creates a new mock instance
func NewMockAttester(ctrl *gomock.Controller) *MockAttester {
	mock := &MockAttester{ctrl: ctrl}
	mock.recorder = &MockAttesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAttester) EXPECT() *MockAttesterMockRecorder {
	return m.recorder
}

// Attest mocks base method
func (m *MockAttester) Attest(ctx context.Context, req *attester.AttestRequest) (*attester.AttestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attest", ctx, req)
	ret0, _ := ret[0].(*attester.AttestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attest indicates an expected call of Attest
func (mr *MockAttesterMockRecorder) Attest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attest", reflect.TypeOf((*MockAttester)(nil).Attest), ctx, req)
}

// Verify mocks base method
func (m *MockAttester) Verify(ctx context.Context, req *attester.VerifyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockAttesterMockRecorder) Verify(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAttester)(nil).Verify), ctx, req)
}

// KeyID mocks base method
func (m *MockAttester) KeyID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyID")
	ret0, _ := ret[0].(string)
	return ret0
}

// KeyID indicates an expected call of KeyID
func (mr *MockAttesterMockRecorder) KeyID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyID", reflect.TypeOf((*MockAttester)(nil).KeyID))
}

// Name mocks base method
func (m *MockAttester) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockAttesterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAttester)(nil).Name))
}

// String mocks base method
func (m *MockAttester) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockAttesterMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAttester)(nil).String))
}
