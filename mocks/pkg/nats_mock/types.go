// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/liatrio/rode/pkg/nats (interfaces: Connection,ConnectionFactory,StreamManager)

// Package nats_mock is a generated GoMock package.
package nats_mock

import (
	gomock "github.com/golang/mock/gomock"
	nats "github.com/liatrio/rode/pkg/nats"
	jsm "github.com/nats-io/jsm.go"
	nats0 "github.com/nats-io/nats.go"
	reflect "reflect"
	time "time"
)

// MockConnection is a mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockConnection) Publish(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockConnectionMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockConnection)(nil).Publish), arg0, arg1)
}

// MockConnectionFactory is a mock of ConnectionFactory interface
type MockConnectionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionFactoryMockRecorder
}

// MockConnectionFactoryMockRecorder is the mock recorder for MockConnectionFactory
type MockConnectionFactoryMockRecorder struct {
	mock *MockConnectionFactory
}

// NewMockConnectionFactory creates a new mock instance
func NewMockConnectionFactory(ctrl *gomock.Controller) *MockConnectionFactory {
	mock := &MockConnectionFactory{ctrl: ctrl}
	mock.recorder = &MockConnectionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectionFactory) EXPECT() *MockConnectionFactoryMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockConnectionFactory) Connect(arg0 string, arg1 ...nats0.Option) (nats.Connection, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(nats.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect
func (mr *MockConnectionFactoryMockRecorder) Connect(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnectionFactory)(nil).Connect), varargs...)
}

// MockStreamManager is a mock of StreamManager interface
type MockStreamManager struct {
	ctrl     *gomock.Controller
	recorder *MockStreamManagerMockRecorder
}

// MockStreamManagerMockRecorder is the mock recorder for MockStreamManager
type MockStreamManagerMockRecorder struct {
	mock *MockStreamManager
}

// NewMockStreamManager creates a new mock instance
func NewMockStreamManager(ctrl *gomock.Controller) *MockStreamManager {
	mock := &MockStreamManager{ctrl: ctrl}
	mock.recorder = &MockStreamManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamManager) EXPECT() *MockStreamManagerMockRecorder {
	return m.recorder
}

// FileStorage mocks base method
func (m *MockStreamManager) FileStorage() jsm.StreamOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileStorage")
	ret0, _ := ret[0].(jsm.StreamOption)
	return ret0
}

// FileStorage indicates an expected call of FileStorage
func (mr *MockStreamManagerMockRecorder) FileStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileStorage", reflect.TypeOf((*MockStreamManager)(nil).FileStorage))
}

// LoadStream mocks base method
func (m *MockStreamManager) LoadStream(arg0 string, arg1 ...jsm.RequestOption) (*jsm.Stream, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadStream", varargs...)
	ret0, _ := ret[0].(*jsm.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadStream indicates an expected call of LoadStream
func (mr *MockStreamManagerMockRecorder) LoadStream(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadStream", reflect.TypeOf((*MockStreamManager)(nil).LoadStream), varargs...)
}

// MaxAge mocks base method
func (m *MockStreamManager) MaxAge(arg0 time.Duration) jsm.StreamOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxAge", arg0)
	ret0, _ := ret[0].(jsm.StreamOption)
	return ret0
}

// MaxAge indicates an expected call of MaxAge
func (mr *MockStreamManagerMockRecorder) MaxAge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxAge", reflect.TypeOf((*MockStreamManager)(nil).MaxAge), arg0)
}

// NewStream mocks base method
func (m *MockStreamManager) NewStream(arg0 string, arg1 ...jsm.StreamOption) (*jsm.Stream, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewStream", varargs...)
	ret0, _ := ret[0].(*jsm.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStream indicates an expected call of NewStream
func (mr *MockStreamManagerMockRecorder) NewStream(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockStreamManager)(nil).NewStream), varargs...)
}

// StreamConnection mocks base method
func (m *MockStreamManager) StreamConnection(arg0 ...jsm.RequestOption) jsm.StreamOption {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamConnection", varargs...)
	ret0, _ := ret[0].(jsm.StreamOption)
	return ret0
}

// StreamConnection indicates an expected call of StreamConnection
func (mr *MockStreamManagerMockRecorder) StreamConnection(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamConnection", reflect.TypeOf((*MockStreamManager)(nil).StreamConnection), arg0...)
}

// Subjects mocks base method
func (m *MockStreamManager) Subjects(arg0 ...string) jsm.StreamOption {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subjects", varargs...)
	ret0, _ := ret[0].(jsm.StreamOption)
	return ret0
}

// Subjects indicates an expected call of Subjects
func (mr *MockStreamManagerMockRecorder) Subjects(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subjects", reflect.TypeOf((*MockStreamManager)(nil).Subjects), arg0...)
}

// WithConnection mocks base method
func (m *MockStreamManager) WithConnection(arg0 nats.Connection) jsm.RequestOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithConnection", arg0)
	ret0, _ := ret[0].(jsm.RequestOption)
	return ret0
}

// WithConnection indicates an expected call of WithConnection
func (mr *MockStreamManagerMockRecorder) WithConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithConnection", reflect.TypeOf((*MockStreamManager)(nil).WithConnection), arg0)
}
